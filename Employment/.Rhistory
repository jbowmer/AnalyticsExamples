n = n())
data_by_date = group_by(data, date)
update.packages()
y
install.package("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("lubridate")
na_data = read.csv(unzip("activity.zip"))
head(data)
data = na.omit(data)
library(dplyr)
library(lubridate)
#sort by
data_by_date = group_by(data, date)
#for each date get the total steps, mean steps and median steps.
sum_data = summarise(data_by_date, date_total = sum(steps),
date_mean = mean(steps),
date_median = median(steps),
n = n())
update.packages()
library("ggplot2")
library(ggplot2)
library(Rwebdriver)
library(XML)
start_session(root="http://localhost:444/wd/hub", browser = "firefox")
start_session(root="http://localhost:4444/wd/hub", browser = "firefox")
start_session(root="http://localhost:4444/wd/hub")
start_session()
start_session(root="http://localhost:4444/wd/hub/")
url = 'https://www.bestodds.com.au/odds/horse-racing/'
browser.get(url)
post.url(url)
parsed_doc = htmlParse('https://www.bestodds.com.au/odds/horse-racing/')
element_find("class = thirdLevel")
quit_session
quit_session()
meat = read.csv('meat.csv')
getwd()
meat = read.csv('/Users/Jake/Projects/ggplotvsseaborn/meat.csv')
meat
meat = meat[,2:]
type(meat$date)
desc(meat$date)
summ(meat$date)
summaeise(meat$date)
str(meat)
meat$date = as.date(meat$date)
meat$date = as.Date(meat$date)
str(meat)
by_year = group_by(meat, date)
library(dplyr)
by_year = group_by(meat, date)
by_year
meat = mutate(meat, year = year(date))
library(lubridate)
meat = mutate(meat, year = year(date))
head(meat)
by_year = group_by(meat, year)
by_year
meat_year = summarise(by_year,
summarise_each(funs_sum))
meat_year = summarise(by_year,
summarise_each(funs(sum))
)
meat_year = summarise(by_year,
summarise_each(funmeat_year = summarise(by_year,
summarise_each(funs(sum)))s(sum))
meat_year = summarise(by_year,
summarise_each(funs(sum)))
meat_year = summarise(by_year,
summarise_each(funs(mean)))
meat_year = summarise_each(funs(mean))
update.packages(dplyr)
update.packages('dplyr')
meat_by_year = meat %>%
group_by(year) %>%
summarise_each(funs(mean))
meat_by_year
meat_by_year = meat %>%
group_by(year) %>%
summarise_each(funs(sum))
meat_by_year
meat_by_year = select(meat_by_year,
year, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
meat_by_year
ggplot(data = meat_by_year, aes(x = year, y = weight) +
geom_bar(stat = 'identity')
)
library(ggplot)
library(ggplot2)
ggplot(data = meat_by_year, aes(x = year, y = weight) +
geom_bar(stat = 'identity')
)
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar(stat = 'identity'))
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar())
typeof(meat_by_year$year)
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity')
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous() +
ggtitle('Head of Cattle Slaughtered by Year')
melt_data = melt(meat_by_year, id = year)
library(reshape)
library('reshape')
install.packages('reshape')
library(reshape)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id.var = year)
library(reshape2)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = 'year')
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = c('year'))
melt_data = melt(meat_by_year, id = c(year))
melt_data = melt(meat_by_year, id.vars = c('year'))
meat_by_year
melt_data = melt(meat_by_year, id.vars = 'year')
melt_data = melt(meat_by_year)
library(reshape2)
meat_by_year
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
melt_data
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x = year, y = value)) + geom_line() +
facet_wrap(~ variable)
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest"))
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(4, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(3, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Moonrise3")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal1")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
meat_by_year = select(meat_by_year,
year, beef, veal, pork, turkey)
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
install.packages('wesanderson')
install.packages("wesanderson")
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
library(ggplot2)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Darjeeling2")) +
ggtitle('By Year, by type of Meat')
names(wes_palette)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
library(reshape2)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
meat_melt
head(meat)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
library(dplyr)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
meat_melt = melt(as.data.frame(meat_one), id.vars = 'date')
meat_melt
names(meat_melt)
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_line() +
ggtitle('Trends over time')
ggplot(meat_melt, aex(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aex(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
ggplot(meat_melt, aes(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
vehicles = read.csv("vehicles.csv", stringsAsFactors = False)
setwd("/Users/Jake/Projects/AnalyticsExamples/AutoFuel")
ls
vehicles = read.csv("vehicles.csv", stringsAsFactors = False)
vehicles = read.csv("vehicles.csv", stringsAsFactors = F)
head(vehicles)
names(vehicles)
ncol(vehicles)
nrow(vehicles)
unique(vehicles$year)
len(unique(vehicles$year))
length(unique(vehicles$year))
min(vehicles$year)
max(vehicles$year)
table(vehicles$fuelType1)
vehicles$trany[vehicles$trany == ""] = NA
vehicles$trany2 <- ifelse(substr(vehicles$trany, 1, 4) == "Auto", "Auto", "Manual")
vehicles$trany = as.factor(vehicles$trany)
vehicles$trany2 = ifelse(substr(vehicles$trany, 1, 4) == "Auto", "Auto", "Manual")
vehicles$trany = as.factor(vehicles$trany)
table(vehicles$trany2)
library(dplyr)
library(ggplot2)
mpgByYear = group_by(vehicles, year)
mpgByYear = summarise(mpgByYear,
avgMPG = mean(comb08),
avgHighway = mean(highway08),
avgCity = mean(city08))
mpgByYear
ggplot(mpgByYearr, aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("Milage over time"))
ggplot(mpgByYearr, aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("Milage over time")
ggplot(mpgByYear, aes(year, avgMPG))
+ geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG")
+ ggtitle("Milage over time")
ggplot(mpgByYear, aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("Milage over time")
gasCars = filter(vehicles, fuelType1 == "Regular Gasoline" | fuelType1 == "Premium Gasoline" | fuelType1 == "Midgrade Gasoline")
gasCars
head(gasCars)
mpgByYear_gas = group_by(gasCars, year)
mpgByYear_gas = summarise(mpgByYear_gas,
avgMPG = mean(comb08),
avgHighway = mean(highway08),
avgCity = mean(city08))
ggplot(mpgByYear, aes(year, avgMPG)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average MPG") + ggtitle("Milage over time")
ggplot(gasCars, aes(displ, comb08)) + geom_point()
avgCarSize = group_by(gasCars, year)
avgCarSize = summarise(avgCarSize, avgDispl = mean(displ))
ggplot(avgCarSize, aes(year, avgDispl)) + geom_point() + geom_smooth() + xlab("Year") + ylab("Average engine displacement (l)")
byYear = group_by(gasCars, year)
byYear = summarise(byYear, avgMPG = mean(comb08), avgDispl = mean(displ))
byYear = melt(byYear, id = "year")
library(reshape2)
byYear = melt(byYear, id = "year")
head(byYear)
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(~variable) + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(~variable, scales = "free_y") + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(variable~, scales = "free_y") + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(variable ~ ., scales = "free_y") + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(~variable, scales = "free_y") + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(~variable, ncol = 1 scales = "free_y") + xlab("Year") + ylab("")
ggplot(byYear, aes(year, value)) + geom_point() + geom_smooth() + facet_wrap(~variable, ncol = 1, scales = "free_y") + xlab("Year") + ylab("")
gasCars1 <- filter(gasCars, cylinders == "4")
ggplot(gasCars4, aes(factor(year), fill = factor(trany2)))
+ geom_bar(position = "fill") + labs(x = "Year", y = "Proportion of cars", fill = "Transmission")
ggplot(gasCars4, aes(factor(year), fill = factor(trany2))) +
geom_bar(position = "fill") + labs(x = "Year", y = "Proportion of cars", fill = "Transmission")
ggplot(gasCars1, aes(factor(year), fill = factor(trany2))) +
geom_bar(position = "fill") + labs(x = "Year", y = "Proportion of cars", fill = "Transmission")
ggplot(gasCars1, aes(factor(year), fill = factor(trany2))) +
geom_bar(position = "fill") + labs(x = "Year", y = "Proportion of cars", fill = "Transmission") + scale_fill_brewer(palette = 'Pastel1')
ggplot(gasCars1, aes(factor(year), fill = factor(trany2))) +
geom_bar(position = "fill") + labs(x = "Year", y = "Proportion of cars", fill = "Transmission") +
scale_fill_brewer(palette = 'Pastel2')
commonCars = filter(vehicles, make == "Ford" | make == "Nissan" | make == "Honda" | make == "Toyota" | make == "Volkswagon")
avgMPG_commonMakes = group_by(commonCars, year)
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + facet_wrap(~make, nrow = 2)
avgMPG_commonMakes = summarise(avgMPG_commonMakes, avgMPG = mean(comb08))
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + facet_wrap(~make, nrow = 2)
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + facet_wrap(~make, nrow = 3)
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + scale_fill_brewer(palette = 'Pastel2')
head(avgMPG_commonMakes)
avgMPG_commonMakes = group_by(commonCars, year, make)
avgMPG_commonMakes = summarise(avgMPG_commonMakes, avgMPG = mean(comb08))
head(avgMPG_commonMakes)
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + scale_fill_brewer(palette = 'Pastel2')
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + facet_wrap(~make, nrow = 3) +scale_fill_brewer(palette = 'Pastel2')
ggplot(avgMPG_commonMakes, aes(year, avgMPG)) + geom_line() + facet_wrap(~make, nrow = 2) +scale_fill_brewer(palette = 'Pastel2')
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(maps)
library(bit64)
library(RColorBrewer)
library(choroplethr)
install.packages(maps)
install.packages('maps')
data = read.csv('2012.annual.singlefile.csv', stringsAsFactors = F)
data = read.csv('2012.annual.singlefile.csv', stringsAsFactors = F)
setwd("/Users/Jake/Projects/AnalyticsExamples/Employment")
data = read.csv('2012.annual.singlefile.csv', stringsAsFactors = F)
dim(data)
head(data)
aggLevelTitles = read.csv('agglevel_titles.csv', stringsAsFactors = F)
areaTitles = read.csv('area_titles.csv', stringsAsFactors = F)
industryTitles = read.csv('industry_titles.csv', stringsAsFactors = F)
ownershipTitles = read.csv('ownership.csv', stringsAsFactors = F)
sizeTitles = read.csv('size_titles.csv', stringsAsFactors = F)
ownershipTitles = read.csv('ownership_titles.csv', stringsAsFactors = F)
sizeTitles = read.csv('size_titles.csv', stringsAsFactors = F)
data = left_join(data, aggLevelTitles)
data = left_join(data, industryTitles)
data = left_join(data, ownershipTitles)
data = left_join(data, sizeTitles)
head(area)
head(areaTitles)
county.fips$fips = str_pad(county.fips$fips, width=5, pad="0")
county.fips$polyname = as.character(county.fips$polyname)
county.fips$county = sapply(
gsub('[a-z\ ]+,([a-z\ ]+)','\\1',county.fips$polyname),
simpleCap)
county.fips = unique(county.fips)
state.fips$fips = str_pad(state.fips$fips, width=2, pad="0",
side='left')
state.fips$state = as.character(state.fips$polyname)
state.fips$state = gsub("([a-z\ ]+):[a-z\ \\']+",'\\1',state.fips$state)
state.fips$state = sapply(state.fips$state, simpleCap)
mystatefips = unique(state.fips[,c('fips','abb','state')])
lower48 = setdiff(unique(state.fips$state),c('Hawaii','Alaska'))
myarea = merge(areaTitles, county.fips, by.x='area_fips',by.y='fips', all.x=T)
myarea$state_fips = substr(myarea$area_fips, 1,2)
myarea = merge(myarea, mystatefips,by.x='state_fips',by.y='fips', all.x=T)
data = left_join(data, myarea)
data = filter(data, state %in% lower48)
d.state = filter(data, agglvl_code==50)
d.state = select(d.state, state, avg_annual_pay, annual_avg_emplvl)
d.state$wage = cut(d.state$avg_annual_pay,
quantile(d.state$avg_annual_pay, c(seq(0,.8, by=.2), .9, .95, .99, 1)))
d.state$empquantile = cut(d.state$annual_avg_emplvl, quantile(d.state$annual_avg_emplvl, c(seq(0,.8,by=.2),.9,.95,.99,1)))
x = quantile(d.state$avg_annual_pay, c(seq(0,.8,by=.2),.9, .95, .99, 1))
xx = paste(round(x/1000),'K',sep='')
Labs = paste(xx[-length(xx)],xx[-1],sep='-')
levels(d.state$wage) <- Labs
x = quantile(d.state$annual_avg_emplvl,
c(seq(0,.8,by=.2),.9, .95, .99, 1))
xx = ifelse(x>1000, paste(round(x/1000),'K',sep=''),
round(x))
Labs = paste(xx[-length(xx)],xx[-1],sep='-')
levels(d.state$empquantile) = Labs
Discretize <- function(x, breaks=NULL){
if(is.null(breaks)){
breaks <- quantile(x, c(seq(0,.8,by=.2),.9, .95, .99, 1))
if (sum(breaks==0)>1) {
temp <- which(breaks==0, arr.ind=TRUE)
breaks <- breaks[max(temp):length(breaks)]
}
}
x.discrete <- cut(x, breaks, include.lowest=TRUE)
breaks.eng <- ifelse(breaks > 1000,
paste0(round(breaks/1000),'K'),
round(breaks))
Labs <- paste(breaks.eng[-length(breaks.eng)], breaks.eng[-1],
sep='-')
levels(x.discrete) <- Labs
return(x.discrete)
}
d.cty <- filter(data, agglvl_code==70)%.%
select(state,county,abb, avg_annual_pay, annual_avg_emplvl)%.%
mutate(wage=Discretize(avg_annual_pay),
empquantile=Discretize(annual_avg_emplvl))
state_df <- map_data('state')
county_df <- map_data('county')
transform_mapdata <- function(x){
names(x)[5:6] <- c('state','county')
for(u in c('state','county'){
x[,u] <- sapply(x[,u],simpleCap)
}
return(x)
}
state_df <- transform_mapdata(state_df)
county_df <- transform_mapdata(county_df)
chor <- left_join(state_df, d.state, by='state')
ggplot(chor, aes(long,lat,group=group))+
geom_polygon(aes(fill=wage))+geom_path(color='black',size=0.2)+ scale_fill_brewer(palette='PuRd') +
theme(axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_blank())
library(maps)
county.fips$fips = str_pad(county.fips$fips, width=5, pad="0")
county.fips$polyname = as.character(county.fips$polyname)
county.fips$county = sapply(
gsub('[a-z\ ]+,([a-z\ ]+)','\\1',county.fips$polyname),
simpleCap)
county.fips = unique(county.fips)
state.fips$fips = str_pad(state.fips$fips, width=2, pad="0",
side='left')
state.fips$state = as.character(state.fips$polyname)
state.fips$state = gsub("([a-z\ ]+):[a-z\ \\']+",'\\1',state.fips$state)
state.fips$state = sapply(state.fips$state, simpleCap)
mystatefips = unique(state.fips[,c('fips','abb','state')])
lower48 = setdiff(unique(state.fips$state),c('Hawaii','Alaska'))
myarea = merge(areaTitles, county.fips, by.x='area_fips',by.y='fips', all.x=T)
myarea$state_fips = substr(myarea$area_fips, 1,2)
myarea = merge(myarea, mystatefips,by.x='state_fips',by.y='fips', all.x=T)
data = left_join(data, myarea)
data = filter(data, state %in% lower48)
d.state = filter(data, agglvl_code==50)
d.state = select(d.state, state, avg_annual_pay, annual_avg_emplvl)
d.state$wage = cut(d.state$avg_annual_pay,
quantile(d.state$avg_annual_pay, c(seq(0,.8, by=.2), .9, .95, .99, 1)))
d.state$empquantile = cut(d.state$annual_avg_emplvl, quantile(d.state$annual_avg_emplvl, c(seq(0,.8,by=.2),.9,.95,.99,1)))
x = quantile(d.state$avg_annual_pay, c(seq(0,.8,by=.2),.9, .95, .99, 1))
xx = paste(round(x/1000),'K',sep='')
Labs = paste(xx[-length(xx)],xx[-1],sep='-')
levels(d.state$wage) <- Labs
x = quantile(d.state$annual_avg_emplvl,
c(seq(0,.8,by=.2),.9, .95, .99, 1))
xx = ifelse(x>1000, paste(round(x/1000),'K',sep=''),
round(x))
Labs = paste(xx[-length(xx)],xx[-1],sep='-')
levels(d.state$empquantile) = Labs
Discretize <- function(x, breaks=NULL){
if(is.null(breaks)){
breaks <- quantile(x, c(seq(0,.8,by=.2),.9, .95, .99, 1))
if (sum(breaks==0)>1) {
temp <- which(breaks==0, arr.ind=TRUE)
breaks <- breaks[max(temp):length(breaks)]
}
}
x.discrete <- cut(x, breaks, include.lowest=TRUE)
breaks.eng <- ifelse(breaks > 1000,
paste0(round(breaks/1000),'K'),
round(breaks))
Labs <- paste(breaks.eng[-length(breaks.eng)], breaks.eng[-1],
sep='-')
levels(x.discrete) <- Labs
return(x.discrete)
}
d.cty <- filter(data, agglvl_code==70)%.%
select(state,county,abb, avg_annual_pay, annual_avg_emplvl)%.%
mutate(wage=Discretize(avg_annual_pay),
empquantile=Discretize(annual_avg_emplvl))
state_df <- map_data('state')
county_df <- map_data('county')
transform_mapdata <- function(x){
names(x)[5:6] <- c('state','county')
for(u in c('state','county'){
x[,u] <- sapply(x[,u],simpleCap)
}
return(x)
}
state_df <- transform_mapdata(state_df)
county_df <- transform_mapdata(county_df)
chor <- left_join(state_df, d.state, by='state')
ggplot(chor, aes(long,lat,group=group))+
geom_polygon(aes(fill=wage))+geom_path(color='black',size=0.2)+ scale_fill_brewer(palette='PuRd') +
theme(axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_blank())
Discretize <- function(x, breaks=NULL){
if(is.null(breaks)){
breaks <- quantile(x, c(seq(0,.8,by=.2),.9, .95, .99, 1))
if (sum(breaks==0)>1) {
temp <- which(breaks==0, arr.ind=TRUE)
breaks <- breaks[max(temp):length(breaks)]
}
}
x.discrete <- cut(x, breaks, include.lowest=TRUE)
breaks.eng <- ifelse(breaks > 1000,
paste0(round(breaks/1000),'K'),
round(breaks))
Labs <- paste(breaks.eng[-length(breaks.eng)], breaks.eng[-1],
sep='-')
levels(x.discrete) <- Labs
return(x.discrete)
}
install.packages('choroplethr')
install.packages("choroplethr")
library(choroplethr)
d.cty = filter(data, agglvl_code==70)%>%
select(state,county,abb, avg_annual_pay, annual_avg_emplvl)%>%
mutate(wage=Discretize(avg_annual_pay),
empquantile=Discretize(annual_avg_emplvl))
state_df = map_data('state')
county_df = map_data('county')
transform_mapdata <- function(x){
names(x)[5:6] <- c('state','county')
for(u in c('state','county'){
x[,u] <- sapply(x[,u],simpleCap)
}
return(x)
}
state_df <- transform_mapdata(state_df)
county_df <- transform_mapdata(county_df)
chor <- left_join(state_df, d.state, by='state')
ggplot(chor, aes(long,lat,group=group))+
geom_polygon(aes(fill=wage))+geom_path(color='black',size=0.2)+ scale_fill_brewer(palette='PuRd') +
theme(axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_blank())
ggsave(file="map.pdf")
